name: CrossCompilation

on:
  push:
    branches:
      - develop
      - master
      - release/*
      - mainnet
      - trunk/*

  pull_request:
    branches:
      - develop
      - master
      - release/*
      - trunk/*

jobs:
  x86_64-w64-mingw32:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: depends cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.depends_cache
          key: mingw32-depends-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-depends-
      - name: ccache cache files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: mingw32-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-ccache-
      - name: run apt update
        run: sudo apt-get update
      - name: install build requirements
        run: sudo apt-get install python3 python3-pip python3-setuptools build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git g++-mingw-w64-x86-64 ccache nsis python-setuptools
      - name: set the default mingw32 g++ compiler option to posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: strip out problematic Windows %PATH% imported var
        run: PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g')
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.22.2'
      - uses: actions/checkout@v2
        with:
          repository: 'protocolbuffers/protobuf'
          ref: 'v3.19.3'
          path: 'protobuf'
      - name: install host protobuf
        env:
          CC: gcc
          CXX: g++
        run: |
          mkdir /tmp/protobuild
          # run cmake
          cmake protobuf/cmake -B/tmp/protobuild \
            -DCMAKE_BUILD_TYPE=Release \
            -Dprotobuf_WITH_ZLIB_DEFAULT=OFF \
            -Dprotobuf_BUILD_TESTS=OFF \
            -Dprotobuf_BUILD_LIBPROTOC=OFF \
            -Dprotobuf_BUILD_EXAMPLES=OFF \
            -Dprotobuf_BUILD_CONFORMANCE=OFF \
            -Dprotobuf_BUILD_PROTOC_BINARIES=ON \
            -Dprotobuf_DISABLE_RTTI=ON
          # build
          cmake --build /tmp/protobuild --parallel 2
          # install
          sudo cmake --install /tmp/protobuild
      - name: set variables and build dependencies for x86_64-w64
        env:
          BUILD_TYPE: Release
          HOST: x86_64-w64-mingw32
          BASE_CACHE: ~/.depends_cache
        run: cd depends && make -j2
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/
          --enable-werror
          --disable-bench
      - name: make
        run: make -j2
      - name: make deploy
        if: success()
        run: make deploy
      - name: create artifacts
        if: success()
        run: |
          mv ./ocpandacoin-0.19.99-win64-setup-unsigned.exe release/
          mv ./release OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          zip -r9 OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: Archive artifacts on GH
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ocpandacoin-windows-x64
          path: OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-win64-qt.zip


# # TODO(warchant): fix https://github.com/VeriBlock/vbk-ri-btc/runs/5005162853?check_suite_focus=true
#  x86_64-apple-darwin16:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
#          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
#      - name: Extract branch name & commit
#        id: extract_branch
#        run: |
#          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
#          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
#      - name: Prepare ccache timestamp
#        id: cache_timestamp
#        run: |
#          current_date=`date --utc +%Y%m%d_%H%M%SZ`
#          echo "::set-output name=timestamp::${current_date}"
#      - name: depends cache files
#        if: github.event_name == 'push' || github.event_name == 'pull_request'
#        uses: actions/cache@v1.1.0
#        with:
#          path: ~/.depends_cache
#          key: darwin-depends-${{ steps.cache_timestamp.outputs.timestamp }}
#          restore-keys: |
#            darwin-depends-
#      - name: ccache cache files
#        if: github.event_name == 'push' || github.event_name == 'pull_request'
#        uses: actions/cache@v1.1.0
#        with:
#          path: ~/.ccache
#          key: darwin-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
#          restore-keys: |
#            darwin-ccache-
#      - name: run apt update
#        run: sudo apt-get update
#      - name: install build requirements
#        run: sudo apt-get install python3 python3-pip python3-setuptools python-setuptools curl librsvg2-bin libtiff-tools bsdmainutils imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools ccache
#      - name: Setup cmake
#        uses: jwlawson/actions-setup-cmake@v1.9
#        with:
#          cmake-version: '3.12.4'
#      - name: Use cmake
#        run: cmake --version
#      - name: download and extract macos sdk
#        run: |
#          wget -P depends/sdk-sources https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
#          mkdir -p depends/SDKs
#          tar -xf depends/sdk-sources/MacOSX10.14.sdk.tar.xz -C depends/SDKs
#      - name: set variables and build dependencies for x86_64-apple-darwin16
#        env:
#          BUILD_TYPE: Release
#          HOST: x86_64-apple-darwin16
#          BASE_CACHE: ~/.depends_cache
#        run: cd depends && make -j1
#      - name: autogen
#        run: ./autogen.sh
#      - name: configure
#        run: ./configure --prefix=${PWD}/depends/x86_64-apple-darwin16
#          --disable-shared
#          --enable-werror
#          --disable-bench
#          --without-qtdbus
#      - name: make
#        run: make -j2 deploy
#      - name: create artifacts
#        if: success()
#        run: |
#          mv ./OCPandaCoin-Qt.app release/
#          mv ./OCPandaCoin-Core.dmg release/
#          mv ./release OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
#          zip -r9 OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-macos-qt.zip OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
#      - name: Archive artifacts on GH
#        if: success()
#        uses: actions/upload-artifact@v2
#        with:
#          name: ocpandacoin-macos-x64
#          path: OCPandaCoin-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-macos-qt.zip