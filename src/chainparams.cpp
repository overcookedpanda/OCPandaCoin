// Copyright (c) 2010 Satoshi Nakamoto
// Copyright (c) 2009-2018 The Bitcoin Core developers
// Copyright (c) 2019-2021 Xenios SEZC
// https://www.veriblock.org
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <chainparams.h>
#include <chainparamsseeds.h>
#include <consensus/merkle.h>
#include <tinyformat.h>
#include <util/strencodings.h>
#include <util/system.h>
#include <versionbitsinfo.h>
#include <assert.h>
#include <vbk/genesis_common.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>
#include <veriblock/pop.hpp>

static CBlock CreateGenesisBlockDefault(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)
{
    CMutableTransaction txNew;
    txNew.nVersion = 1;
    txNew.vin.resize(1);
    txNew.vout.resize(1);
    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));
    txNew.vout[0].nValue = genesisReward;
    txNew.vout[0].scriptPubKey = genesisOutputScript;

    CBlock genesis;
    genesis.nTime = nTime;
    genesis.nBits = nBits;
    genesis.nNonce = nNonce;
    genesis.nVersion = nVersion;
    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));
    genesis.hashPrevBlock.SetNull();
    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);
    return genesis;
}

/**
 * Build the genesis block. Note that the output of its generation
 * transaction cannot be spent since it did not originally exist in the
 * database.
 *
 * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)
 *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)
 *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)
 *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)
 *   vMerkleTree: 4a5e1e
 */
static CBlock CreateGenesisBlockDefault(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)
{
    const char* pszTimestamp = "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks";
    const CScript genesisOutputScript = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
    return CreateGenesisBlockDefault(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);
}

/**
 * Main network
 */
CMainParams::CMainParams()
{
    strNetworkID = CBaseChainParams::MAIN;
    consensus.nSubsidyHalvingInterval = 1050000;
    consensus.BIP16Exception = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");
    consensus.BIP34Height = 1;
    consensus.BIP34Hash = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");
    consensus.BIP65Height = 1;          // 0x0000000000000000000000000000000000000000000000000000000000000000
    consensus.BIP66Height = 1;          // 0x0000000000000000000000000000000000000000000000000000000000000000
    consensus.CSVHeight = 1;            // 0x0000000000000000000000000000000000000000000000000000000000000000
    consensus.SegwitHeight = 1;         // 0x0000000000000000000000000000000000000000000000000000000000000000
    consensus.powLimit = uint256S("00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks
    consensus.nPowTargetSpacing = 2 * 60;
    consensus.fPowAllowMinDifficultyBlocks = false;
    consensus.fPowNoRetargeting = false;
    consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016
    consensus.nMinerConfirmationWindow = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;
    consensus.MinBIP9WarningHeight = consensus.SegwitHeight + consensus.nMinerConfirmationWindow; // segwit activation height + miner confirmation window
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999;   // December 31, 2008

    consensus.nMinimumChainWork = uint256S("0x000000000000000000000000000000000000000000000000000000000000aaaa");
    consensus.defaultAssumeValid = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");

    /**
         * The message start string is designed to be unlikely to occur in normal data.
         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce
         * a large 32-bit integer with any alignment.
         */
    pchMessageStart[0] = 'O';
    pchMessageStart[1] = 'C';
    pchMessageStart[2] = 'P';
    pchMessageStart[3] = 'C';
    nDefaultPort = 8077;
    nPruneAfterHeight = 100000;
    m_assumed_blockchain_size = 1;
    m_assumed_chain_state_size = 1;
    // clang-format off
    genesis = VeriBlock::CreateGenesisBlock(1631200005, 376976050, 0x1d00ffff, 1, "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3f04ffff001d01043756657269426c6f636b20426974636f696e205265666572656e636520496d706c656d656e746174696f6e2c2044656320392c2032303231fffffffffd5b02eb1a5bb7a000000016001490763ff2585361e98965764266b4ff7f6d828b4ecb7f4870160200001600143de1ac6e5c146e1141af3b71857887c8332c78f8c5cca8ff05000000160014f2f9374f757488f082add2b54e96d037292f3759b8c2211505000000160014ea9443731c282cc0e2a8d4b54ac68bada9a89e4be0ac684305000000160014e99935e1bd0037751fbc8ea59794bbee4c754915b3d444f305000000160014e08aab188be8a3777dd3d97f9e05535b14e15e37b00d60a507000000160014df4075454104c8d4b1b8c592bf6c1cdd224b46e6687696c507000000160014da26ffc17aa7bce51d2cd4e8f8b614f1d1ff3ce7e5b89e4407000000160014bd271e5228cc4d14771b1c60a64c4452ae661a9f3864193aae070000160014a3c23c26565baac14041e565a8c8364bc1d21e7a204f9f69060000001600148cb1704edfb6ae61d7734dc01906274c4fffca3446b662a3070000001600148963a2325e0b18d3fb46894156d1f249165081c781ef51960a0000001600146f7a258bcc9cc1c86f6691bc2f5f7dbb0e44bb3d47c04d740700000016001441eaf00f149ec16a9ecee79a578fa10f8b840435891e1bbd0600000016001429791e458d13cc2afb4483d505db5ca9c6dd6d6a7cac8973050000001600141f344ba9e8cc02761bdfc73b6a4de5ddd4d14371ba4657020e0000001600140f72ab022a9d0b86e75324f26f276705d72835466bd9afb70300000016001408723d0091f9837751c6a9cad0171bb7e615b98d75dba0782c0000001976a91432cce228abd8171ccbeaa93d2d39f533c0d00ecc88acd923875b72020000160014a89f3eeaf836c7d8d9db4afc5a23a03ee1435777fbbe01f5c201000017a914d82e3bb18038f8fe69f20c0ab3a6cd6da9c8596b871e4055df01000000160014d556bcee132392b786a2642ae5657341e7a542885405e79b330000001600146b3dc8d1990202998ce944455927e2510c2262f355d335880100000016001443b8e98dc946ec83fd0a1ded17a569e8ecd18cc9b4f5aa3e010000001600141f6996a7929e0f9f7fa7e2b10a0a88f6a28d06cde90ff7e001000000160014048851826850b17e4832b1d83fa5f5f3917e6893db1a2bdc02000000160014c83cb9fbc26cfd857330c5bb8601f676ab96a29474d27b2302000000160014bae0329262cc3edd9746ea30fcddfeb8cf4c507e3db88e250a0000001600147fbdbd611a26ff25c4bf2d03e7eb046bedb7bb60ba79b51d0b0000001600141af532435e5dbef79705ed2ee4041c06f714746e4f35ee5f00000000160014e9bd1a74331f38f611452d10aeead7345f40624f4bd6c15500000000160014e38d7f442dd10d0e0e13d2d8a810c69ce65a88f0450ae96e00000000160014cadc83a0fa5f873d1fb339f75f5b16b04f105a4cf914028500000000160014c8b3214dea64bc9cf06f141212a8144042b01aa2f6cbbf2000000000160014b202ae85c9d5e9a7ae13b57e88eee6e134a4c2e017851fa10000000016001497506d8b2f6c00b20740467645d7845f6b93abb1075d3863000000001600147bf240c807a21ea2cf598a9fb104e3a75c3a0a403b5bf82e000000001600145d81a176d1c6e740b375697fd091da67e00594f15720b6600000000016001444a60b3ed1473028fd6ee219e6f46eb6d0ed007e47c4cd9b00000000160014075e2d60c1eecf5ef6477e099f9e92236e35592e74bb371f02000000160014f07ff0def9419c62970ee90129fdbfe0c064c7b758041cf101000000160014ec8467abb1d0d5419cfa02aba4989720ea83418769d98db402000000160014e489ba4af99bb37ccc95a8934bfb734c0c00174fad9835c001000000160014e433e99ad0b4535ddd04952bd2f4669653746929e9b664cf01000000160014c9d2dd7da147392afcbdd1440ded739850f969760af0628102000000160014c755e9ee5b62df19fad199326f5e44b3c79d74bb6968d12a030000001600148240019e110b8734fbb85daa8ab3d491e69fe7ae0f58b99c050000001600145e0e7978d7efd5e4f7355e44f1827851fb5023960ccb5170020000001600145e05bdfd46550d2853ffb0763441d5107f47c24c336d62e20700000016001454b39fdf70005ab9f5403e33e1afb00f7fa8452ba190a3fe0100000016001445feb0d1bbf07202a1043e89f51e6728457a5f6ac649604b020000001600143a2596b0477ed6e0e9e0fd95c4541968edb7c266a8f15e34010000001600142799b4243d7a9026e622ba5073592296e6d4fb873a6320b2010000001600140f238284994a03ff5647e595d5714bb834689d0199e1190801000000160014e4699b01c454e8f670d0fafbe4c4a8812e27ad8760d19d1001000000160014c06217883dc5663bd2961ad2b811aeba9c65ecdd74bde718010000001600146c8528c67b7377f4bebc7f7574a8a1de439b16d5f30120db62000000160014a2aa42abb7bfda934c7dca3698925df91d2f16934d0b7ad501000000160014e9401b7c73bb27d51b96053d98eaf70791d31b3d6e14b37e02000000160014ef24568f3400dd29ca0a5a76147c7baee83ab59d7f47413004000000160014deb9f74dd4053148ce81805cc5fcf1e5694de52e3b7a6992010000001600143eb585b39453bfeaea3237918b0edb58c3ed8cdf9d485c5e0200000016001437cc90244c27ffdb7f22f4081114f612fade54c422607c5d02000000160014354951e278fb9bcf97cf988ad340196af92c8338534fc57503000000160014c8ba8944194eb74cd5302a7e0989238b7c1b1d55d4e8433501000000160014ee36bc46e4b1ef0257b7caf7c66b793020d5c5ab501d381001000000160014b4903f4ac5426f1b9c9f6ab2c781a13c528be1c2d4fd07d401000000160014a62356d12462060114669369b33429425734a106427a355a000000001600149e3e4c484e9d7fa6a2a8321318f89d2dcf077082b48e6f9401000000160014253b0228d3043b71b47c2ef66382afdf8268e8968e7f7e7406000000160014164589373e8be86b95b951e1d59d2a5b1eddfafbcd54d31302000000160014bf8f8a0f5b0ed81a906ab555e3424a41aa4e5fcc68760c7c04000000160014708f3eeea351e7f90cd0496ca1914b4954fc44c0714ce7520b0000001976a914befab18dc4b90867908526f416372fbc1ecf7d7688ac61a15b49430100001976a914a2ca34332d72f3f18bf4e05a35c9f194f07751b988acf213678700000000160014ddcad868f8c54c93008f457db430731051d22dcbaaaf430c0000000016001459ab022625ddfed68a3b839553cbf3a9097c2767fef4f71d00000000160014c23686badbf2dc04c5a1ddb61e8fd8be231840387fc7601400000000160014928161379a58dda152c31f1f496d3ae15686c8c4f61bb218000000001600147570ddb5490aebe8dec7c25f5ce54633d93090a83088c31400000000160014412981fd696093df78b23d5cf488fc8828a5223a8819ca040000000016001414b65cc9c2de6970b66f2bdb452ee0e7e11361d5fd39a4e2000000001600142513034925edcac32804b6fcbe01652c1c203d5152a8a7990e000000160014c5670bb16958a8cbc892ed8ab0588203bbf007e118e5330a00000000160014edb9eb0a725b91076c02b3266f852938341e9400561e7868040000001976a9142b551a287ac027023b0d29320d8f9f7760dc084488ac02fbc731000000001600148d1beddaf2b77626da810681d2c0089844b0a0ecb02e82310000000016001438c1129577517a000311b9c7990a3c2257e91206d9c47cf2000000001600141b74276ef95abb687955ac3942dd020f14b3b8d4f9aa993500000000160014f6feb0eba8c5b11b2cc58d4222ae7f484407dfd8a8e1dad7040000001976a914d91d138016e5cd2563af9e970b0e4f596fcc7f5288ac1f61167466030000160014a01c859de1bd723122992225c1e790d4d5771e55bc3c0f00000000001600145f23520c54b62f5be97291243892aa5be29affe28bf61d6df9000000160014c55eb4079726b62d2e3238a9a911079c8f2f093dff253974d1030000160014cd3920c06cf4cf31716a6c7fb6d3472b7fecd67310270000000000001600140ecc412492b5dfcbe6d3024a1d80b691e157533a3e67254000000000160014db33f5f96c5a922c729aa535661f0e9a1707d33a2b41f1000000000016001422bd26710c54982ee70d214595e1c7fa266d0cd973ee1400000000001600142d4d71642f91b0e1f2d6f286f48b440854b8b1d12129ac0200000000160014e759d3345555434c34b220de56f7f46d59a092d5d4501100000000001600143977b59b541b6e0cbb2b6d8885dcb39ced47bf0a02d7ee5d5b00000016001431cc7009174d90bd4a359cc294ce593a727d19fb822d0f00000000001600142d5f17cfa9621550afc0acd5e9c0b07fd5a4e21f00e1f5050000000016001443ea767595a05ec851abb6de455146c6dbf9b5c97fe7bd8a06000000160014cfc280efce32c7e7e2e03aca722944011cff6c3e3b19210000000000160014e66c45d94f8efab2b9a4ea79a38dddd047e33d1f0b5e2dbd01000000160014e4b2ee29fa4dd61469f1d4d22f3cf278a98ac43fc4cf432801000000160014ad7518137356a0217fff80bfc422c67e9ce998446569b64b01000000160014a3a46aea013b751ae068000711ac15dd9c0ffdc55c462a9a000000001600149dbdf75ad07852c4b7fbc8f906b1291295e33123d44e896602000000160014948cb1872ffd5537925a3ab8094d6c75ccd3901025da01d90000000016001490d5d270d30592205698d1bb94a8a3233dea1013cf9de663010000001600142ec9a20b181d5d41ca1147f621611e53049878b021ffca4e010000001600140c804c7e6b5b6926800e3a0fc08e67e2f09d1fafe5e402e00100000016001406bd99aa71c07ec337208bc233d3ddbf0edaae80293a0d8702000000160014b8d4953fd5a9c3e4714c731c946896800cf70bc52b45e61c02000000160014ac8c744e4a599df709c9ce5e8886f1eeb1df52a2844fd2cc02000000160014428d667eb3e2a86685d67bb65e64cf71412ee42fb97a6d23020000001600142975a63fa85bbd8baf847d893ff99b0b64b0fb092dbaf8f901000000160014160b49d4251d2c11c3d7ca58fa8b8ed9942728ecf84b4f5e020000001600140b36640ecb5ebf2a4e5d62a51acc49692e8472aa136b0199060000001600147e464d50cd3f91cd450d44961225dce43c3d19cb71173c36010000001600149818cd25162edf6a5f243d24c1c1f3ccdf2b4e9dbc0da7e90000000016001482551aa279718ba8697e5221a700adcca9752433a6a06f7f000000001600145d3f8c817db6ef0f7af6b5621e094259dc9257eec2ec30e54c0000001976a91458133509634286f47e4bb341aafa7307f2fb798d88ac44c0a5fc01000000160014ec5fc1f124fd18fdbcc789e00e7965f8dfa1e40dd4435d91010000001600144833ef0a73d3dba42015bd65938f970a36d4f9c11a896f17020000001600143f906cc91f249eb442f7230cea4a071028aac12d6d74412d01000000160014393b1b80ce531168d171e9a7ff21106444ed8f4f935a017a0100000016001432105bf41350409ad42e6479622cb670a9ad89ad585954170c0000001600140ed9e956e495c82a6e1e42688cd01ebfb4996f07ab871d490200000016001402a55b85391bdd847464b6d8b222b3faa043a676299367e5010000001600140187143dae864673189cc443b2fe4b2c9c3c3a39ab12c0af00000000160014859bb491dd8c15494943b29839b4c63a3cececce696a137c06000000160014d69be5ca43e9c97dd4f825e1750cb27994d46c341dd12d2f00000000160014e9c4b4f0b95fc2be1d22bd8733d92a95e116d0c6babffe12020000001600148f299c132e582e6b9d12059447f35c12129191e05a5598a0020000001600141c0175caa3fa2438a6276f9d6b145e17c08e599fe22aa21874000000160014384cf5d5d96455b51c6b10dc2cc96b9985fd180f04a0435f01000000160014f87adaac7154f2b4c39b5b74e0eaacccf8f5fc083a42fbca010000001600140d176bbe9cacf8fc9740becf0ceee874752cabba473f07120200000016001410fe95ca6c8bf5b8c30a9a2bfcc1bde1c03f62dcc7a3275d3a00000016001409aee41184cc04a0c978a8c2f6d97a9e76b4fc48ac6212e900000000160014611171d9e9167727dab9f85db6eed6b4ef29569da16a49820100000016001432834ec0a233c0204ab8bc907066f8f5e44f586fb0a4985a000000001600144ae2aa8a604c9e51a637755da900503dfe2606e2c9b4733f00000000160014482ca5ce26f98eeedf690b9fc46ece68dc4edd6fe6d3d8f7000000001600143ca42b065b987e8eac4abbfa04a818428f77559d009244e700000000160014f6547bc6a0d5892e0b96f760f73a05db79b736b8895fc7ad01000000160014dfe258f1884090ee6c44c6278f6692bd9d70a40154cb604301000000160014b83a1b861daa29a2a00b4481962931f228e92b85714a8f8e0000000016001452b3578555887de6202a18c219bddf4a2cdd2f760461706a000000001600143a86da5f6cfcaa7d52ad263238ec7b0d7310d0bc2b91943e010000001600142c3864a05a8a90c0eacc480b88db5ee8953a150a6a72bb2f01000000160014ea60c660fe036b22e85d849c05190281507abb6046086b420100000016001486bdc149d3a0289b2fad759edec2c95ccdf5cc24b318d574330000001600145cc206f9418cbed8f8f42db618294bb7cf527d51078dd61100000000160014fafb71adf185adbfadf0cad607fb6bab2867d68ca2cd7b26000000001600147163966472cd54373c46c9f02ba680ec7ab6aba4ab2c530b000000001976a91487923f4dfbba206d1bc7f60110f3ebfa415118e588acf8c0d66600000000160014ba18e7f66de28625686547e337d1cca53b263e5269eab1cb00000000160014b1a0051c1a546618633066cd3594309a8b1f0979ef9ff28600000000160014993d4f5c40aa50e425abece976a9f524b5a2d813f00efc5e000000001600144396126e0f3744388b7d8b1b4b0fd2f39495ae501510cd2300000000160014dba24201d5bd7f41fa05b1119864c35847f4fd72be972e2f0000000016001444ed4248018fc5d04ca0725dd43d99a1a68195a0b1bd111d00000000160014750db03db1c68f8155e4b58bb17cdc7362927dc91fe8bd1d00000000160014601ef75ba005fd516f02b037c2ada23edb0e0181f6275724000000001600144a4663631ac0ad9d9468de474f30562af6c2dd5e75ce421d000000001600143a965c7ea3caa8cc51d8b97bb137336902ded48e1f51dc24000000001600142aa9914bc56b08542eb0b90e31996ff7fbcc44e46d359f910000000016001445011786c31a81c216036814bf6da1c290e98ca63a3be504000000001600145d09e603e1651abaafa2a412c10b8c861eae1f574235d179000000001600143414c35504ef58d205c2dbb3754142e32d0cea914641c32300000000160014b2686e794d140359957ffcb5b776803c7a9a8ac57107978907000000160014d745e74263ee53473c42176feeead14ecec1fcd430d908ec000000001976a9143015f9e3329f91f34de964b15d71852a7c62b59c88ac0aa07d0000000000160014a8ed780483a85d53f2d6b457351e741898a491146ebc0e00000000001600149fa7df3113859422c4987a9231ff5ca4707cfb28223f86f8100000001600149bc2dab08343395f391bbe95eb2c864e0ef2e0ab5dba4600000000001600140d258880b1789dd40b0227d58cb05f900d2ef8f07364cd1d00000000160014dba4f341beef94b8a0032cb5cdd08e37934a358a2173120000000000160014fc1b6fbfed5df00781e9fc0dd64564cbc22106ec350f140000000000160014e5d9840c3c201ad65097e33fb3073fc280035236fa410f000000000016001414eeb6539447dfebd9ba04689a9455b3ee3bdd29e4bd029500000000160014583f2b37086efbadc97df72761c380090186697bc7909d5500000000160014c17edd11c3fab81290fca2cfbb17633709e9901013651c6f47000000160014abb0962e893bd69e3a68ca48f75b990cf9d486739bc097bd150000001600147e2cd2b4fc9959b38b85233d71838d7458127e051933d60d270000001600146499dc03f94f27100f34c189610a487e0ea1357a6c65b2945200000016001451c00cd5cf31bbc775449396d7160c2961c30e78c93bab5f140000001600142b59df111fb9f74d21931d87f73a3eaa8209f971f317fd10100000001600142a9a70a915883273ac7587c2f4c6cab5c6622f1931b3f9fd1500000016001419de5a0e85ec469d1b8e4053fc7aca55314aea7146834e88060000001600141354eb95f2152afc556997e24fd905752591187a9cce7dd30900000016001412f2003e01ad63290023408d4a5ea01c579110fef4c9232c4000000016001406277667f4a97183c898ecbd4d8fddac075b05c7d4a2ff2e000000001976a91484690d6807ce5fc99ff6fd0d7944b5835547749988acfdc577595d0000001600147f2fa3b6f4e94454940eda6229e603fce37f81ce52b9367b39000000160014666ff52347d27591563b438b4bb8a31519a7e2a93fd2967e0c000000160014fcd52735701ae58a371138d276016ee21b0656e0ebeb0cff42000000160014f256fc1f9459c47821001d99819071f83f1ec62144f8f22a45000000160014c3b3fafbf7444b7c93f3e259152fc1ce0d18046acba573341000000016001496582e666ee73c6ec1099cf735866ad3d297ea54fbc857812d0000001600146b5ce59a67f4c35f74bed0dcb235ae1cc8bc34d06ff8af374c0000001600146a7281f376fd96500a7fca53764d2d0d6489f0b60edd209b370000001600142588dace27e932eb53bf258547119f9c658eae28bf14e130370000001600141e4d19e3da8225a96337a5300e66208cb1c86d580f842d6e090000001600140d07105451c4e308ccbc1bf9a1427d132e5aacbd267fc4a53a0000001600140b86315e1b1234625e884ca8334c6c9cb73a64e5820b800812000000160014c032ac5cd0747acd145eda7c1f6022f8a89ca8a3bcef37e7010000001600142741e3954b42b953944fb01da9f03036dc6536ded680cbda0a000000160014adcd8795ba25e131a65b93ddc7ed38a1b6117ae8e07af0cc0f000000160014c21464fe25c717d7fc609ca401c0fccf45919365d69a1f1c08000000160014d6557858c1c4df4005a2684ba633b4966ebcf85e17da1b8513000000160014c32e0f10c4fd9419036b926eea4231e26fbb0995bcf028b5010000001600149433e5c3cfaf535addaa632d43b383fd611e771703ad6e20030000001600141ccb29de05608350fdfbf403953a27bb937620828a7f885a0000000016001490fe098c3bc1ec60c6e12a6730afd8ea066d07ba67fb4815000000001600146fa83a3946b70b98c8c19abc52a173242bfb035a32cd87ac0d00000016001483f9814e3d5f261ae9e4dd6d7574fb1dc3520a0d1ec916a5d30000001976a914c05b105ff6f27b4dcea4a8ddab63303ea950760b88ac8b00614212000000160014f65e2cf3e3ef450cd036d759ce10b30936644da232bd4469210000001976a914c4738d0da035bdc829afc1554cc833281647a71c88ace1c4a398840000001976a91433726d8dbec0162a11d899c37779197070a6555688ac8c8d7108000000001600142b089c03b0264111b087e1e24ef3a65ef98391c60769c1eb01000000160014eb8c205b132c754b653a91474a3e92b7f7ed21a3c5610368020000001600144adcf68a7f922ad929f1829b3eca1ad044df566523ac353d0b0000001976a914f16d793001018899189dc2dd610ff81f446d5f8388ac0aafafa338000000160014b4a9f036a286cba00da5d1cdb71998aab48e55b1a1842a51160000001976a91441f9f105d0d0429dfaa714385ea582510a64e81488aca1410f371b000000160014124503cb371a64c3cdfd08bccfeced680903c0edc25220ca3c0000001976a914ba2bc3574f53f92ee3338e1cdce9f1b145bb346f88ac98197d00220000001976a914c68ea8dc3b344faafbe3dff94e3fa4b7e99bc02588ac03463d643b0000001976a9146c85cbf321d00bcf9086ba302bd01a5af9ea9af388aced3bacc809000000160014a9151166d5af8e139ca6c4ccc8b9c170a1682c2e04bb3262080000001976a91416ebf330136ad5d53963879fd03705648d46e14d88acf3ee9ea60100000016001472587e255006c178424beca4a7874f4ee7547aaac379eaa71a000000160014c3ae287b0c8d91b287a1b95e133f5622ca6afa1d68cf8c79000000001976a914344a0f48ca150ec2b903817660b9b68b13a6702688ac84d6360c000000001600145707bd470c7f0e9bcaf1ec7418a303e551db75da154ad2bb19000000160014ac235724da744f34e49c8a05784713713e65e448b44de74d0d0000001600140dadedd633728ba652042a4ef8fb399f1a9a31c11caededf42000000160014c5e17ff30fd223502399530d2ed6f818d70e63d403748e46070000001976a9148a74ac15bc0aca60c0f0604e7c5b3e647d23f92088ac6691dee6640000001600149b5982df3ab17e5537356a3c62dfac3efeb1da44e5e0b508600200001976a914faea5c675eab996aa1e9d099d1c42b9bfdb4970b88ace5191100000000001600149c3603958aec30d91a834e27062df04d43b1cda3dbbf601103000000160014bc4408f4913c9b71ba861132f08fd8ae8804fc0f99be53000000000016001427bbdeb030d22512184a303612c85ec1fcc50be1893aceb818000000160014156e934c045dd1214b6a4c4eaa9a16b5dc31f4e303bbf829060000001976a91438f1f0a848c2283fbf9c1b5a78848162f68d194488ac128f180d00000000160014e61446aca0daa6e59b2c368646ce0e894ae6753e18d7ca04070000001976a91421362def4e0059715b90d353a13a481fb4a85bd188ac4882c5040000000016001427370c5eb85f9af0d27adf1380c75da5d4047c049cab7ad00000000016001422d6aa537741360159c79948b646a2d4edcf25296d48740e000000001976a914c88aa38c3b206f9bc662f3a9c4d36ed3d816191788ac6e9999ed1b0000001600149af7c0c1b48b91f05e0c8ce5a39ac87106367ea01f09110000000000160014822848467877d1e0014669884f3b9f18ce801a38464040c01500000016001444e5572326624f16b0ceca04c2fdf9b812d103abc9c8575c020000001976a9141ba5742a6d60e91e6b4322c50c58b3a3326c3b2f88acd0f20e00000000001600149e84d8c8e1603787b386ca6e11bdc3ad260ea04bc90595f5010000001976a914394f9d8096510e52b9fadf7997f36e6e6980570b88ac7a8c0301000000001976a9141f07efcc482776a6ee71ab29a1a74ebc617fb56e88acb129b55f00000000160014beb8920bfbbdc213ef98e3ec085c20d2dd25b3d1ce1f3d50010000001976a9149eb17c63cdb4e431accae58f38499380dfc6714a88ac12a9a453010000001976a91409b0403e626038a603cb4aec7a3e1b2bc6ffafc588aca26f49d32c000000160014fe8b07b4aa4ba36ab3bd19aa17167fc14d1389524ce40f0000000000160014a93902788c32a2d07a8d3d090018e5f9dbb46ef211f6100000000000160014b9f1ae07d851fc65f3157373da2b1d62515b6566ffb22358130000001600142601c501a19016fd3ca590ad294505b612be05365c002600000000001600146179ee695037f1bcff6f113805bc1f3dbe571c6b33537669070000001600142eeda35e99562050bc902140ce00dd95579a5a2c84e80f0000000000160014edcf9c1f1f84041d5faa916235dce38ba2f877ab50ddad03000000001600146200787e77ec6516be69b44ef7ea8e07e9d76806f1480f0000000000160014c65b7841d8b53027f9fa4a0ea744353c7b53c3a442f210000000000016001428ee4816b9f03ddf5544563fdd0022475e72bf2daf971b0000000000160014ea3b1d5cc9cdbc913f45a4524b5af3afca39c81a34b0100000000000160014b876ac035eb778b2e43b1966f11ead98c565672284e51000000000001600141a5ed2a1b022cb76c17d0ce62de3a39a4fb4dd83de6f0acf000000001976a91484fbebbc1c9c7d890b2b5a917fa11adf31b7e00f88ac73f4100000000000160014a3777c2da1131a95cc6c1accacbd6a747857959c8e2a000000000000160014a3d954d5bfb041fdaf505918947c830c3afd1f1acc540f000000000016001459ed41384454420d33c92dd1ea9d42531b76dbb946b4100000000000160014ce4ee04a87a563e359e0bb6dcb86abe28ceb99cd1b5e0f00000000001600147bb40e4a3ea0b64ff8d38d89da7cb9a6a7b9050983560f000000000016001488ffa0f6f207e8652c0837893db2bb4c2c46aa45d9bb390000000000160014cafe11b1a61de7c334ec6e4370fe83c6fed54b765c9b1000000000001600143cad4d324e9593d3a3c7a36231cc44372de47ab060c3100000000000160014fd312bf047caeb08fcef915e4b2b5e4b276e62ddcff50e0000000000160014f698adb35c20a118fb4c03d014b54b9f76c6de7d1fde6202000000001600145b675c610d7ca8b4f5528983241a04dab47c690b511d11000000000016001491ea688b48d5487a9061a875aae20287e00198490bd40f000000000016001457edec7aed6e64d080fcc357e63044aab5cf594f6168100000000000160014821ddd07280813a37ec3faf4759939996442766b49460f000000000016001422e4fa0717956d244c4ffd55cd3560964ed69c0cde9b0e000000000016001494f183a8579c0617f6b69ea7c4590b701c2eb03a7f15100000000000160014b6abfe032681ccf8d271bb3d0cae798d49b0efa192ca1b0000000000160014a93ecc03c89e28c410df5ed8f0b4094670b1fb012a460f00000000001600148ea40155aed38cfaa827fb49e3331cf81df254124503efe0000000001976a91437eacf083ea2bf6b55b01ecf6291bcbd6d5aaec888ac1d4c96120000000016001447e57b9d4b22b937418f594820aef6d7604105d7d5400f0000000000160014b69d3dcd36da30814f313325a4997bcbdfcbd420d6131a00000000001600145effe753d44578c1aafefb76b9709ffc199986de53c72802000000001600143511d852121dd731eaf1dd131175def12c336cf259fc100000000000160014b4479e523ede98387179e6b3ad2f6c3e0d5f2379e342120000000000160014a7c06509c752c3278e6d4a6429b782613da304d0e1f80e000000000016001468072cb34f878780243b67f3a8b4b41a1417f8b94e5c1a00000000001600144b2bf6e906790092ad0e969a57a9a2ed6e71363b7b81100000000000160014aec7c9101d42b904500d1caa0caf76af3e6ecb6bdbc90e00000000001600142744104ba488468ebf1b14cc1b2fad93f1af8254e2ca100000000000160014bff5752a9ae11360727d2c1f93b0d15dcb736a8c47bd0e0000000000160014eb011f982d9ad5a8c0d82c590958acca13f43eea071d110000000000160014c06f0aae2bdcdb9cd992cd7a2641bcec6fb067cb65cd100000000000160014d0b79e2e402799561831cb8ce804bbcd38bbf9f139e20f0000000000160014a914f75c34a3cba4f1be8129da8e4943110dd461e824210000000000160014fcbf04f376e3751d59026cf2a0286cfee53b6e3f1f9f1000000000001600145e7f7714d9a632c07f35db179a1c6d42550dc0e584460f00000000001600141ce0356cd2b04edf92f3a743af12d0f969250fa46d9c0e00000000001600146b4c05e6194a3d8abcb66f4d5b8c7272814f9a95eb527600000000001600142e3891727a755b984851b2d8794f83b2dd392011971a11000000000016001404f92a1efd79549fc2eb51b4d9600dcfb21b887c2b3a30010000000016001469b54282b512c5a89804ec13011e057aff446e6e70d11000000000001600142933c07a5dc0978f6c5d9f92e10a430c2222e0291caafade03000000160014849c9de4ad8fbf5145191c2b6d67b2e5c0d86d72e027eb4c160000001976a9140c9d22ea511cfe1430cfc7f08e92e6d09c61233c88acc9c91dc900000000160014267e4e27d8347ace9a1c0e8bc09c98d53079a294c9060f000000000016001452ac0849b44390231c8d67f360cd697dd43ca0c621fe100000000000160014d5df71f9a8c279f7c9ece60b3d304b7106b56265f03e0f00000000001600140d3f5e9b9b3a92397c86fb4c6082b35bd5e00c4476da100000000000160014007dba62e6fb817d2d56c448cf064fcd4a0495b148ec230000000000160014411e3a080c31071e07cd23f276eb8a2162c498e813ff1000000000001600146d38d54b6bae9981d940c18d12f8946a77f9d5e2f0a310000000000016001478a74a95f70ec29acae625468bdbccee8120b01850a9ab00000000001976a914d28487530102ac98fe70d72235c0e7104671971188ac151d110000000000160014bb731ec88926de0d388e38021b0d86b2a025213266e30f0000000000160014a43f65610d17d9efe4dcb443d5c15aa82ea0350adf68100000000000160014f8c7ce3c921f5290c2addf7cddd08d5cd5491ecb2bba0e0000000000160014bcdca54427708440112577deabbf2b71d28c2f1978430f0000000000160014fde10815d634a1925c333c59d0aa4b1d0d69247f647010000000000016001416b966bcda60c9552ddaebc36219d0ab34382cfd144a0f0000000000160014f377a6e303fa3ef1168602683af0128f94e0851b031211000000000016001405363f5c5aec9651401c41622d4146e28562d21d73991000000000001600140e5dd2a9ce3794121b5daaf317177b08339d8c0577fe10000000000016001419f3cb428165028f0e7dfc9b6578d067ba27ccd7091d1100000000001600147326bda3435459a48fde7df38e228645a453462052f51000000000001600142b7576974e9daaef3651d6f8eaffde54bee09f20a2e8100000000000160014d46960d80a905a6fed59897322ced1650eb0a7813cc90f00000000001600140600e178dc4e24384d57e8e9dd633b16ca9009c30cde1000000000001600142d53593557370750805f459fded486f34e9339b43c981300000000001600145e34ede916421db96cbb971f0b0407de2ca9229a555d0f00000000001600144e7543b7a6ef59683d0653a2e73a01e88c8b59200fd5100000000000160014b62a1172f3d1f1ae7eafef963df9f7415fb7aeb303040f0000000000160014652bbb048d2b51abe58e199e7f0e1a52060b3f5cfc98100000000000160014e5b89596b1cb12564d72b1363f3f57060dba4ab648460f00000000001600140eaa3028f1c7763ea7288849aa7bfe8150cf92d87e1d110000000000160014e2f682ace911f2a3bd3556c1f217cfea9b1f8b35e1a50f000000000016001464bc37bd671204457d582a1e69d205e61bee5642610d11000000000016001454dcf3abf256ebfa0b8a498afb2fbe5a0ac28a10f2b70e0000000000160014a84063b7b03c5fd64f5cb3aa15c96050d5194f4eefc9d91d000000001600144bf4a8c58ebcf6dd332b85ef4392472312bbe0da0e0f10000000000016001472c8661002678c548363fa5f9650b82e5177e160baf60e0000000000160014be464911a9ee9e36b1a3533f9bc771d22e1329f8fd0400000000000016001452fa871ca38abcafadd06f371272c71194176c1d1860100000000000160014b38907010247f37495f71aaaf5b5e4504768d2ca0d161100000000001600141510429ccd4eb6b36c26aa7c3a3b9373fd9b5746b1f50e0000000000160014fbf48542f25b9c9ca066500fea46d82bb49afafa48cd10000000000016001421101b6008c0826374f596e6fc6a59e2521c5d99fa940f0000000000160014b8534f89fd29d5e7764e7d28dd73b737fb85e4bbc4de0f000000000016001420c7e98bdfec514d683ce7c233f4dffe78f5fcb548ea4709000000001600146886a22487c726a6786f2d4e6849f434dd8f77edc7be0c0000000000160014a62b7e9c90e97ca04f750ac4b95f933735a1605530a20f0000000000160014c0175ce2c5c79210d6e41a4cef1501a5e089a8456b801500000000001600145329fae196a0e632b6696acdeef6fc42d06d9541498610000000000016001449aa2180c91d45e4afe89a7c4e2ebaf805a349a960c40e000000000016001460ac8b8df5f3cf0565b70307e77b6a752d4e4957f76b0f000000000016001497f7bba68804970f712967e250ae67af734d798d6c86c32504000000160014eae471a11cc2cac4b9c8b2b37f9712c50dd5ccecb6981000000000001600143fd448ba07a28c3194b50f8244e4e0244df3e0689d68100000000000160014a179b185dbf4361ff57a23dad6e5e3e69ebfcbec1ce610000000000016001417bcb2b1909d92d5c489c72f6c1fbd2519b87813b80111000000000016001436153a449d8e115465f593dd7f39b116bcfe11ba050ed5000000000016001477e5f69df0a248f00b05fe13f5825d484bbfd45e5af60e00000000001600148059f8336e507779ee7cb061126512c9bdd934c7ea520f000000000016001467154f273410270d98a86f4bec3d60b220b9a2166bc11000000000001600146f85a7f35133dd195a2fbf932aaf14079dc8899fdec31000000000001600143a16e656efef37516cdcf276f67cb384811fc49872410f0000000000160014296e3b919a098b7dc245a4a2519f44c4358bb21bf1b010000000000016001433a5a50b82f01ff68204cb44cbd8771b993e877a4c470f00000000001600146cb9ed8293f66f1c91cf3e6257d9c4d07301d85ea3ee01000000000016001447ddc7faed6ce9d0f778950006571e1c1b47a18717bd0e00000000001600144dc0cf79d3ee470774403bed7aca0378e522534fabd9100000000000160014f0ddf132802f45e277eac792f6f5d9e64f73cf69a46d0f00000000001600143252e0d0e260a47eee5aee977b816e82240ec6ccd0dc1000000000001600142e0ac5eb708cbf6431a96ba57a8b5a27455c16ba02320f0000000000160014d35fcefc9d7663935ea4884f5d1ef21172d34f078b470f000000000016001440cfcf97c9a8f9a5f9cffae038ed98cde90069121599100000000000160014733c1ad5c640c8aacf48d9bfaeb709bde2f7d5b6f24d0f000000000016001494a0f9f8b64787a43e897b02c0350bdffa9951036d3c0f0000000000160014ef6c9918f6be7e08c80dfdf35eb96a2f3fad03d73a16110000000000160014126bd420710b762b50eff632bd1ccd36cb87f5c820550e0000000000160014b70451ae269d347da681b31f9b9f9e1715ed3c65b109000000000000160014001e02169d4e7fdc3a8484e75bf2b3c4314a07981fcd1000000000001600140814f52d42b77758b8a46a8be8781c677e15b100b6f90e0000000000160014a930b6dba748cef3c28fb290e6cd83bec7166ec2c8e0590200000000160014cd37b293e376494b37531512c8c7eb639af2052c1ef30e0000000000160014df318087b1eebb7c8d2d31355b42926e36d150608f721b000000000016001431e5b4ec0c756f6122f70e118bb7a4bb561fcccaa9a80e00000000001600142cccb7d93e3fa5964f9e947c46a24e7db4e74d7dec9810000000000016001466cc4bf821bf7a41c24eeca1c7bb9a23a7fe38f0c93f0f0000000000160014cc7a83b3ce3b2b7d9e3914fa993a1aacdfc8719132f30f000000000016001445707fcd7e5fe0f0bebe33f1b49c1f9c7998154151e90f000000000016001448ff027559c6de4555cb01072bacb40c442e9622a5f8100000000000160014c3d2f3f1be1897f38ccd23d0b01864a5d978f6fc8bed4e3d000000001600140156ec5d1b8e8e80a76205ae9b87f94d8c95a2d8291d110000000000160014baf025ba3590fdcc4b4c0acdc3870b0f3502bc109df70e000000000016001422990e9eb07801fc574ab51f3c14a35fb436a0d8bcd70f0000000000160014d4a3282729b2d6b7badbf8a8fe93e162c6a7ba5e5a540f000000000016001411eb6be43279acba39defd4075b918dd86fb847cbbeb100000000000160014bb182de706661d43f0784ece51ccd0aa64051bf1de510f00000000001600141f945b6b62ea792b4001e4549f75ccb4b34855ae63fe1000000000001600142b9cf37cead5554fd19f01f25e05e32011005c2015c1100000000000160014a2800f0439c2bc7d4a2030a6850d35d84b8a4387e3eb1000000000001600144fc4031801389216dda799c6ba9b702046484e6d0006110000000000160014dedeae9418646846637028e8037dd1c18fcbd6adb676100000000000160014a78d7667e6d8d824629a25979fd11772f8d8d4be5ccf1000000000001600148775365f7b5f58ed5dac6e0c2f7b6f34ec74ab958f5d0f00000000001600145aee4c49a4c4eee2e7db848df9a572267c46acd02bf91000000000001600145e4dbd46ed73b734efef5a45edd45c9ef9cdcb285cb90e00000000001600141ffb0cc63d1754d6504122806fd0b61531b67a60dcee1000000000001600141f13592b62e56ed95511ad85cebc5c32847a63dfc2fe100000000000160014fd4c114a45f8c8dfcd15b41f3773eda6eef97cd74970fa0100000000160014b411154c9ef9b156e7f8f02a144e096775eac6860065cd1d000000001600144fa6f6fc3e64080601c48ac1a1626736186da47f7081100000000000160014146ee6aa9ba467af85d4720a76d75a80bafbd20870bd10000000000016001478cf59b935a65d992e192eb8def8cf040de3adde89d6100000000000160014aec79602ca86515b3f45efc9d95f7d9e1c7a15403f5f0f0000000000160014d1568441190433c31f314eda9b90797d99a94d261469100000000000160014bdac1ebe8fee7054fab8235cb18c896921f05911a43f0f0000000000160014438e0bc2350f595dba1253567f014a7eb1cfff770e0f100000000000160014472cfa35fef12c786a0a620984560efe9c1d2aa1c5a80e00000000001600145be1b4c40513f7bbcab1a9000999f4abe5a13d19b8d4100000000000160014e583c48f83e662e091d53344dd1c7b954ce72a8ff8cc100000000000160014848a92d444496253c9b9e95c1ea55831795d0b260e490f0000000000160014a929518f65fd513ea8d1e7fb60f40fffec266b55b0681000000000001600148a209d9d36553911ed83320e9325f6742e99cbffdc011100000000001600147b686525452c4c66a5665f2ff6bc6b78460169afdd83100000000000160014e580935a668ac8571dba2f827ea4dc671de318301e691000000000001600146d6f7f402e39103f00c9ffe0429ee1a947b522b34e3c0e000000000016001417098b9104185d6f9198d03a4b8a1475250e6c431af610000000000016001443f0bf4a2e15481e0bf537369953d2ebfe0c6af622ea100000000000160014a2729a7300ac0b7076e534aa88ba5f5196eda46aa68c100000000000160014608ecc4020b39efc9401498ba8801eb6cbb257baeb8f0f0000000000160014637f552aaefb3d449ba76cc07aa3b58f15ba20a1e30e0000000000001600142f83f6964ca0d66463df4c38cc5c073a0948cb668ae7b870020000001976a914c1c37c84332ac6d736c72274650154bad7be4c3688ac11590f0000000000160014f4e171f819d95e826ff54b0c763c64c1a6111656695b0f0000000000160014a38cde3cf4a58f167f75c4b71ce8210a2cee27cc76f773000000000016001450b0f4442013ab59ef654366bcc066e6951ee47c80b5fc5c02000000160014b157b643d1640a4c54c34098376c09168c3da9e830d810000000000016001416d5eca2fe85b7a8ca67c85c513e0909f7d560b9fe04110000000000160014b2e94ee7693d2a64542a03685832c0857d4904b602ae0f00000000001600142d089b6a0b5610e178deaa9ef5f8b40ffc291be93be0100000000000160014760c730b45b6bc79f038c5c55a7e78aabc3098dd805a0f000000000016001473301b1b70938e557d11b2e51f339099c5ebcc35ddde0f0000000000160014c0a6cd67fafe7169e6eb537a559224ac11867042d0ec10000000000016001459f0bc2c06fc300ff3489258039fca178f4020ae06fe0f000000000016001469ea28020d5c218c3cfa7809171736e8bb4d5ca84bfd1000000000001600143ee35a5d222d9b189e4b401aa2d3c17723cce7428b98100000000000160014ecf73e18290e7a05c4f7500b627016ed412b70d6d3ed1000000000001600141f5e639241645ae34b2a97c2f3d3d407b4fc44da217b100000000000160014b8524dcbcdf03ade6693afeeec6513123643ca639174100000000000160014fb4cada279f510c0362b21db0f1f867f20d8a354d8f40e0000000000160014b30281726b06e1f24387f6b528450d301f6fafb639ee100000000000160014257e5327694d2e61ad8024cb9fd414ecd6fbdb118ca00e00000000001600146edfae4904f14ffe6a89767734d8b916f75466a7aaf20e00000000001600143a20ace9197edefb33d9f28b9d631df871198640b0d9100000000000160014c6b55c3cb03bb0c607ef81521db9918e3da4b308b7fd1000000000001600144f43d41fe747f097919bb43e173abcef78d8c32769b9100000000000160014b189281a85ec5614002cd968865d049a6aaf77373c1b11000000000016001497277c60f3b7b4d50c04479c1f2d00541d997d777b9a0e000000000016001456285249a29562231ecd65f0860f9f6076284ab630ff10000000000016001409357749446dfc9d015b3bd28b7f2f62b9dc5a954e8d1000000000001600142646a261a990b33ba74af313443b67435278697140c70f0000000000160014fa403c3bde5ea004e9249d4c36151b05310350e6a43f0f0000000000160014e561bb06bce5eba1e1af034e5dee9b6ff09bb82bd01111000000000016001447d64d7eafda1af457ec3fe8514ed7fcbe69572c8d440f0000000000160014e715a0728be5ab4e64fffc3167a2009efca5a7cf82e40f00000000001600141773a1f06ecc967ffca90f6385d4edfc5f89b2176e0c110000000000160014dc3ec0c12de394e8483b01b7db3505df6dac7f40f4ea0f00000000001600142a01d6e04f1f2493a00457f4de2346abb98f7e8506b80e0000000000160014d93b75e3c6030b23923626ef5010e455a03a9d39422d1600000000001600140c9120f5fe25baa5633be90875dad9dce900699b7ef01000000000001600146dff2ade9c704d04d0a8a158cafc1635f61144f0b3410f000000000016001485320208ca80672a51e0898c58e66e5f9e5920b871c70e0000000000160014b8026847c55e2c0364cc798917b632157284bab0b6640f0000000000160014083c48650b95b69c576b479856b3537c7c18f9a6c2400f000000000016001470682d69c8d3267ecf8db2abcab0d0910a343607d1011100000000001600141008bd298ddf65e35d8ad038a6cb3c47a6acb2147a420f0000000000160014fc80ebf8f69672f135e394553f5c476696cfbd3ef7261f0200000000160014602e375dd3aa57f3d0acffbd6611374bfa354c0172f01000000000001600148f9009cf937886d8b4b94267ce2bf43442301cc5401dcc0000000000160014928f4decc9b49ef940d2d6f1fe985c7e2678cac900c99500000000001600144a07c18ba4f3da02097e8cbdb51eda511f6b21f59f8e180000000000160014ff91e78776cde796aae7dce1c92747bd06e6954969550e0000000000160014a0a20cdfe994356178598523af681380612bc3c3031d110000000000160014956da35472a321c7f95bb6ee17ec22206ab0b283dcd1090000000000160014812631ce387770fe1b0eaeec0397a9198d5750a26bea1000000000001600145e70287dc24da64a54636200b302b7c7278835ac30530f00000000001600140ba67af5dcd807db249560d13803498d66ac235016ec1000000000001600144eb4bc2a26402833b215abfe08e36e73ffe0ecc4850011000000000016001472395a258c293f80dc795d906b76aae0251a50b74dac10000000000016001475dd5ea05a2a029dee199d9d13ab9a4ae194ac217ede0f0000000000160014ad10ab6d4585733c6e35f40f47421122891bc6ed54f10f000000000016001468fe1f7faf8cdf191ebdd0ee90b38fc7954bd68e21470f00000000001600140d21a0ad59be9a822ce9401edf76e9e32a133eb034cf4c000000000016001428b352cc4cb5bdc96611e13709cbffd0c117ca6e64940f00000000001600141556218f3a1cd1c6dbcf3252e358c7e9df49dbeb84f60f0000000000160014c0a390e2926892e52e050dea866d468f2ed4661591e90f000000000016001453263bfac4454b68a9af4d90f493aebf793716f8ea7a100000000000160014ed2ee98ca027b59366cadcdf8f1e7358c1d9082512c5100000000000160014bef29236d77b50ac2d0f1ee18509da51df014c7c99a34a8900000000160014b17df6ccf412e3714b09ce7b269ceea9674e2109a7560f00000000001600148cfa91640b7cbd93e3c508b2fa18575dbd07ca47aaf8100000000000160014fbfe914c6fd7cb3db43c6fb813c35257d90dfa3e6a470f0000000000160014d343f0b06190f9013b21085dfe68a53f1589f32118ed0f0000000000160014cc50be4782e000a8aa823821ff14284a1716a3852ebd100000000000160014923d725d8662d730ca75b9a09f91c86100fc51f1520d1100000000001600141c26a99833816b5902b578a362f1b76575b99e48503e0f0000000000160014cffcec994e51e6ec864e783778f7cb3244b23d56cb310f0000000000160014ac4f370c09bb00484f04a86c9a9404c6352628d821a40e0000000000160014e8b56a50649802f47cbf33164a05514cac9757c8e8041100000000001600144715a838034b1acf2fae29e9f86aee86ffcab7e7f60111000000000016001421df1f3a3c7150bd1d0c1f89c131dd0c8491b2b378d3100000000000160014977083a363e60f4dfd72543e74f2d68e86c5c28e22a30e0000000000160014ff95ac747ccc66efae58d15a51d696e07af4957802ea10000000000016001438f78a65741484f57b6d30d5187de52385a4ad8f3cbb0e00000000001600148ef377cc03b41ef57f0a4513030c0d3ba253235639f70e00000000001600140d61bfd5a499b5bf5bf9111dd2f4a684efa6caeb03b2130000000000160014b5a87f06ad4dea43f6d2ed9ea7aa7f2e2790a06150a3100000000000160014d5e07bac41e494d548ccdc34bc9da0321d53523f50a50e000000000016001460aa515bb16af8a34b6858fc9f69e1043276fe181e69100000000000160014035d0f97f9b363dd43d4179ad383eafa2112fab715691000000000001600140e684072c6c2ef625ca7ce6f794b42bb43124af0728310000000000016001419db3c0ea2ac8b0da905dc82053a4d1bc404d33aa417110000000000160014476f6854e4715d798ac8737133b3560bc5053dbf65c5170000000000160014ad210723b13fb1802d9e313eff73b9221af9e4a6a05b0f00000000001600142d287f3fdbe70112361bf5982e58fee389fa3c406407110000000000160014a8f15c7b5ad9ffc11252f4ed5072f3c4a74317cddb590f000000000016001406a10d66559bf4ea28b2803eac407978936f58e12603130000000000160014d6e6478ae174c63fef6fb6921ab034b15568c8abd5490f0000000000160014506d85625c079dfee86750ab567cea9fbe42767e19f11000000000001600144f8e86652c78eb662b9b6bf759ab06aaef17505772d90f0000000000160014d15fb7e2484de683615947a5be83abf9747079dea5fc130000000000160014217704038dcf67b389911219a1ccef52b415d0bc709e0e00000000001600144e7133eb53ab2cda6e0841f840c7fe89bfd2d03005eb0f0000000000160014ccaab65b59feed19e7c803f686b891f8824473d077e30f000000000016001418331351079161585b60d396cb56a4408d1ac9639fae100000000000160014a1687830f37ab0c2f95aed0f556043b9109639a3f50c0f00000000001600149c363b7f246ff2a424ebd65328ac80fc6ff94c00b7400f00000000001600141584899bdf9e1a6b023cc2b17ba92073a359023e94550f0000000000160014504e328c74dbb507a3bb3305626156123d7a2f2afad51000000000001600147d87702289db55d399eeef51a68f75684f01ff893afc0e0000000000160014d699a94ba12f29d254f2950d6ab5e79bbb3716aee6540f0000000000160014c3d6228be0e3c7ed7f8dbfab244d7b1f325d4aaf123f100000000000160014f32c3c5c42f4a2bc216e0106d9b211146090ba7150df100000000000160014439473b11d55aa10f4cbf0b0535eca567c0e595342b91000000000001600144ee4feb584a25cc5214452573e249db8e4f20d1902320f000000000016001470197635723f79a14a3eb7ca9c9044e5383af9a1f2a20e0000000000160014875fef77b19417e600256d77512b4e73e6970a6fbed30f000000000016001480be6a9f717b4d8fff37ee726c91b214c61a649eea74100000000000160014bebdca8d4ded00edc39b5b4586f6719f87d61e46bd9e0e000000000016001423f72b632a36be3edf6f71c61e6c338f90865ee20299100000000000160014f4baab7811d0011446b797b8adff77d219f91b8026dd10000000000016001493e0a6b0bd4cc262db18db24034f97c8775e8dbc24f0100000000000160014482996939f86437dce7bfffe3fe42f0ad014eec30c5c0f0000000000160014c2cdc88bba5a716b8dcab3b7bd16124bf6b3559005ed0e0000000000160014219c20696a8d9b7b4e0e52fc5fbd28053ea7452b0cf410000000000016001427f046182b65df59c5a118fc525f5a02f8e1283734af0e0000000000160014ca56b1c6ca5afaab82657700d11e4e5422cb8047711a110000000000160014cdf557548c8253ba8f2325b264e48d5d08e7d2048b430f00000000001600146abc0c70469d3cde6fea865ada467c6f66ad65cce9f7100000000000160014ffc38380280e96d2b81098d5803a2786e0f69d11dda8c9000000000016001441a8cb8ddcc0cd32e21461b3445b727baffd56539bc724000000000016001479af986d51e2d7bb9a9f07835869ea2c8b493adae45e0f0000000000160014babc59594691ec421867589133d2e034ffc54f76a8cbc81d000000001600149915bee02f0f01ebcd64516f9af04beac5034da2780f0f00000000001600143bb3ac7095c1e3e79bf3bc61860877142904c981d0d1cb0100000000160014a650f2ffa121fabee8556450466da62166064179257eab01000000001600149a7ea24d334774c85286b58820901286231bf80e851e0d0000000000160014866eab9519bb617a3a25d8abbd5270a1810c940194270f00000000001600145530b1b21157672b52a6bac808441a259771ab68cc6f241021010000160014b4a3fdf3208967ade885092277943886bc7af34cce1f3d500100000017a9149eb17c63cdb4e431accae58f38499380dfc6714a870065cd1d000000001600143dd5f2f667315cc98e669deb88d3dfe831aa2cea6a10580000000000160014ac0d66fc2e7417992294442de4a103fcdc98fbeed597250000000000160014b75c14dce34de9b49778aed1b68afd884a53fbab24712d0000000000160014eb55cd7802f65345c129e92a2dc05387f56b1bc8e61a68070000000017a91415df24139dd0e668b6b7f30614b182ccc724f4c0874b131700000000001600149f47f1330cc76cb59aeeaa81ea9908f948f1bff800e1f505000000001600149a4af7c6a66e48bb92651150b6b1c5a9ecdcdb040065cd1d000000001600143dd5f2f667315cc98e669deb88d3dfe831aa2cea00000000");
    // clang-format on
    consensus.hashGenesisBlock = genesis.GetHash();
    assert(consensus.hashGenesisBlock == uint256S("0x000000003ba53616bbf2467299d11c1acac4907723e4e34cc9e410d97c7c6cd7"));
    assert(genesis.hashMerkleRoot == uint256S("0xde4c6021602aa5066fef8acfbb9e1e1191bfaa35fb2515c0816a61a22a597b97"));

    // VeriBlock
    consensus.VeriBlockPopSecurityHeight = 1;
    consensus.ZawyLWMAHeight = 100;
    consensus.nZawyLwmaAveragingWindow = 50;
    assert(consensus.ZawyLWMAHeight > consensus.nZawyLwmaAveragingWindow);

    base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 0);
    base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 5);
    base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 128);
    base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};
    base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};

    bech32_hrp = "bc";

    vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_main, pnSeed6_main + ARRAYLEN(pnSeed6_main));
    vSeeds.clear(); // Clear DNS seeds

    fDefaultConsistencyChecks = false;
    fRequireStandard = true;
    m_is_test_chain = false;

    checkpointData = {
        {}};

    chainTxData = ChainTxData{
        /**
        {
            "time": 1631200005,
            "txcount": 1,
            "window_final_block_hash": "000000003df2ddea1f2fcb04d4fc471ec6652304f0129bbfa1ad5c4863d740ae",
            "window_final_block_height": 0,
            "window_block_count": 0
        }*/

        /* nTime    */ 1631200005,
        /* nTxCount */ 1,
        /* dTxRate  */ 0.009195220975897313,
    };
 }

/**
 * Testnet (v3)
 */
 CTestNetParams::CTestNetParams()
 {
     strNetworkID = CBaseChainParams::TESTNET;
     consensus.nSubsidyHalvingInterval = 1050000;
     consensus.BIP16Exception = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");
     consensus.BIP34Height = 1;
     consensus.BIP34Hash = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");
     consensus.BIP65Height = 1;          // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6
     consensus.BIP66Height = 1;          // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182
     consensus.CSVHeight = 1;            // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb
     consensus.SegwitHeight = 1;         // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca
     consensus.powLimit = uint256S("000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
     consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks
     consensus.nPowTargetSpacing = 2 * 60;
     consensus.fPowAllowMinDifficultyBlocks = true;
     consensus.fPowNoRetargeting = false;
     consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains
     consensus.nMinerConfirmationWindow = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;
     consensus.MinBIP9WarningHeight = consensus.SegwitHeight + consensus.nMinerConfirmationWindow;
     consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;
     consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008
     consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999;   // December 31, 2008

     consensus.nMinimumChainWork = uint256S("0x000000000000000000000000000000000000000000000000000000000000aaaa");
     consensus.defaultAssumeValid = uint256S("0x0000000000000000000000000000000000000000000000000000000000000000");

     pchMessageStart[0] = 'O';
     pchMessageStart[1] = 'C';
     pchMessageStart[2] = 'P';
     pchMessageStart[3] = 'T';
     nDefaultPort = 18777;
     nPruneAfterHeight = 1000;
     m_assumed_blockchain_size = 1;
     m_assumed_chain_state_size = 1;

     genesis = VeriBlock::CreateGenesisBlock(1631200000, 412533384, 0x1d07ffff, 1, "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4104ffff071d01043956657269426c6f636b20426974636f696e205265666572656e636520496d706c656d656e746174696f6e2c20536570742031332c2032303231ffffffff010065cd1d000000001600143dd5f2f667315cc98e669deb88d3dfe831aa2cea00000000");
     consensus.hashGenesisBlock = genesis.GetHash();
     assert(consensus.hashGenesisBlock == uint256S("0x00000000152547e03b86a4d667ded82a91fe4fe02245affae26ad8b20c950a60"));
     assert(genesis.hashMerkleRoot == uint256S("0x172a104def609f48532c3e4afbd9d9f530b7c359d031ac47d63191cb11ae56fe"));

     vFixedSeeds.clear();
     vSeeds.clear();

     // VeriBlock
     consensus.VeriBlockPopSecurityHeight = 1;
     consensus.ZawyLWMAHeight = 100;
     consensus.nZawyLwmaAveragingWindow = 50;
     assert(consensus.ZawyLWMAHeight > consensus.nZawyLwmaAveragingWindow);

     base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 111);
     base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 196);
     base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 239);
     base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};
     base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};

     bech32_hrp = "tb";

     vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_test, pnSeed6_test + ARRAYLEN(pnSeed6_test));

     fDefaultConsistencyChecks = false;
     fRequireStandard = false;
     m_is_test_chain = true;

     checkpointData = {
         {}};

     chainTxData = ChainTxData{
         // 00000001da906d7e587fe344ca51b097d621f88aaad0f93389d4df558492e86e
         /* nTime    */ 1630388498,
         /* nTxCount */ 1,
         /* dTxRate  */ 0.004480880092933702,
     };
 }

/**
 * Regression test
 */
CRegTestParams::CRegTestParams(const ArgsManager& args)
{
    strNetworkID = CBaseChainParams::REGTEST;
    consensus.nSubsidyHalvingInterval = 150;
    consensus.BIP16Exception = uint256();
    consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)
    consensus.BIP34Hash = uint256();
    consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)
    consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)
    consensus.CSVHeight = 432;    // CSV activated on regtest (Used in rpc activation tests)
    consensus.SegwitHeight = 0;   // SEGWIT is always activated on regtest unless overridden
    consensus.MinBIP9WarningHeight = 0;
    consensus.powLimit = uint256S("7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks
    consensus.nPowTargetSpacing = 10 * 60;
    consensus.fPowAllowMinDifficultyBlocks = true;
    consensus.fPowNoRetargeting = true;
    consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains
    consensus.nMinerConfirmationWindow = 144;       // Faster than normal for regtest (144 instead of 2016)
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;

    consensus.nMinimumChainWork = uint256{};
    consensus.defaultAssumeValid = uint256{};

    pchMessageStart[0] = 'O';
    pchMessageStart[1] = 'C';
    pchMessageStart[2] = 'P';
    pchMessageStart[3] = 'R';
    nDefaultPort = 18477;
    nPruneAfterHeight = 1000;
    m_assumed_blockchain_size = 0;
    m_assumed_chain_state_size = 0;

    UpdateActivationParametersFromArgs(args);

    // 5 COINS :bcrt1qez4n0zsax5nc9cnjtwht24sj5hzg70aj76dmhw | cU1QaDgufU6FH24feZJ3f7RToVVbriuw7cZ91427mgbVA4Sk1kAi | 0014c8ab378a1d352782e2725baeb55612a5c48f3fb2
    // 10 COINS: mpAUyhS3aieQXv8gSxZSbbcuFWVHPaDJsC | cUNUxiqMtffurfGu9BKocHTvvnujynZh1Yrc4CVhgTBeQJfC9MqU | 76a9145eda029a306532dfe700ee725b2570516f69f99088ac
    // 15 COINS: 2MtxZriAdLuYCGFzUNHZLXKgGhLWBfbqoKg | cTD9hmreLGnNPBPTz4TY4YbKCXZXfC6cyEXhcZTCzzycVmWwS643 | a91412c9c431502d66e1023d2e148d11260a4e9e9b1487
  
    genesis = VeriBlock::CreateGenesisBlock(1631200000, 1, 0x207fffff, 1, "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4104ffff7f2001043956657269426c6f636b20426974636f696e205265666572656e636520496d706c656d656e746174696f6e2c20536570742031332c2032303231ffffffff030065cd1d00000000160014c8ab378a1d352782e2725baeb55612a5c48f3fb200ca9a3b000000001976a9145eda029a306532dfe700ee725b2570516f69f99088ac002f6859000000001976a9145eda029a306532dfe700ee725b2570516f69f99088ac00000000");
    consensus.hashGenesisBlock = genesis.GetHash();
    assert(consensus.hashGenesisBlock == uint256S("0x4f4dc340eda407fe5b692a8878b185cf2a2495333b1c929640812d7159924365"));
    assert(genesis.hashMerkleRoot == uint256S("0xe5d9b21840a6c3123d90084ad79bbbaabfec115611232eb9525471572525e92a"));

    vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.
    vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.

    fDefaultConsistencyChecks = true;
    fRequireStandard = true;
    m_is_test_chain = true;

    checkpointData = {
        {}};

    chainTxData = ChainTxData{
        0,
        0,
        0};

    // VeriBlock
    consensus.VeriBlockPopSecurityHeight = 200;
    // do not activate LWMA on regtest
    {
        consensus.ZawyLWMAHeight = std::numeric_limits<int>::max();
        consensus.nZawyLwmaAveragingWindow = 150;
        assert(consensus.ZawyLWMAHeight > consensus.nZawyLwmaAveragingWindow);
    }

    base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 111);
    base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 196);
    base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 239);
    base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};
    base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};

    bech32_hrp = "bcrt";
}

/**
 * Allows modifying the Version Bits regtest parameters.
 */
void CRegTestParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)
{
    consensus.vDeployments[d].nStartTime = nStartTime;
    consensus.vDeployments[d].nTimeout = nTimeout;
}

void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)
{
    if (gArgs.IsArgSet("-segwitheight")) {
        int64_t height = gArgs.GetArg("-segwitheight", consensus.SegwitHeight);
        if (height < -1 || height >= std::numeric_limits<int>::max()) {
            throw std::runtime_error(strprintf("Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.", height));
        } else if (height == -1) {
            LogPrintf("Segwit disabled for testing\n");
            height = std::numeric_limits<int>::max();
        }
        consensus.SegwitHeight = static_cast<int>(height);
    }

    if (!args.IsArgSet("-vbparams")) return;

    for (const std::string& strDeployment : args.GetArgs("-vbparams")) {
        std::vector<std::string> vDeploymentParams;
        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(":"));
        if (vDeploymentParams.size() != 3) {
            throw std::runtime_error("Version bits parameters malformed, expecting deployment:start:end");
        }
        int64_t nStartTime, nTimeout;
        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {
            throw std::runtime_error(strprintf("Invalid nStartTime (%s)", vDeploymentParams[1]));
        }
        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {
            throw std::runtime_error(strprintf("Invalid nTimeout (%s)", vDeploymentParams[2]));
        }
        bool found = false;
        for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {
            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {
                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);
                found = true;
                LogPrintf("Setting version bits activation parameters for %s to start=%ld, timeout=%ld\n", vDeploymentParams[0], nStartTime, nTimeout);
                break;
            }
        }
        if (!found) {
            throw std::runtime_error(strprintf("Invalid deployment (%s)", vDeploymentParams[0]));
        }
    }
}

/**
 * Deterministic regression test
 */
CDetRegTestParams::CDetRegTestParams(const ArgsManager& args)
{
    strNetworkID = CBaseChainParams::DETREGTEST;
    consensus.nSubsidyHalvingInterval = 150;
    consensus.BIP16Exception = uint256();
    consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)
    consensus.BIP34Hash = uint256();
    consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)
    consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)
    consensus.CSVHeight = 432;    // CSV activated on regtest (Used in rpc activation tests)
    consensus.SegwitHeight = 0;   // SEGWIT is always activated on regtest unless overridden
    consensus.MinBIP9WarningHeight = 0;
    consensus.powLimit = uint256S("7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks
    consensus.nPowTargetSpacing = 10 * 60;
    consensus.fPowAllowMinDifficultyBlocks = true;
    consensus.fPowNoRetargeting = true;
    consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains
    consensus.nMinerConfirmationWindow = 144;       // Faster than normal for regtest (144 instead of 2016)
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;
    consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;

    consensus.nMinimumChainWork = uint256{};
    consensus.defaultAssumeValid = uint256{};

    pchMessageStart[0] = 'O';
    pchMessageStart[1] = 'C';
    pchMessageStart[2] = 'P';
    pchMessageStart[3] = 'R';
    nDefaultPort = 18577;
    nPruneAfterHeight = 1000;
    m_assumed_blockchain_size = 0;
    m_assumed_chain_state_size = 0;

    UpdateActivationParametersFromArgs(args);

    genesis = CreateGenesisBlockDefault(1296688602, 2, 0x207fffff, 1, 50 * COIN);
    consensus.hashGenesisBlock = genesis.GetHash();
    assert(consensus.hashGenesisBlock == uint256S("0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206"));
    assert(genesis.hashMerkleRoot == uint256S("0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"));

    vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.
    vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.

    fDefaultConsistencyChecks = true;
    fRequireStandard = true;
    m_is_test_chain = true;

    checkpointData = {
            {}};

    chainTxData = ChainTxData{
            0,
            0,
            0};

    // VeriBlock
    consensus.VeriBlockPopSecurityHeight = 1200;
    // do not activate LWMA on regtest
    {
        consensus.ZawyLWMAHeight = std::numeric_limits<int>::max();
        consensus.nZawyLwmaAveragingWindow = 45;
        assert(consensus.ZawyLWMAHeight > consensus.nZawyLwmaAveragingWindow);
    }

    base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 111);
    base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 196);
    base58Prefixes[SECRET_KEY] = std::vector<unsigned char>(1, 239);
    base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};
    base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};

    bech32_hrp = "bcrt";
}

void CDetRegTestParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)
{
    consensus.vDeployments[d].nStartTime = nStartTime;
    consensus.vDeployments[d].nTimeout = nTimeout;
}

void CDetRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)
{
    if (gArgs.IsArgSet("-segwitheight")) {
        int64_t height = gArgs.GetArg("-segwitheight", consensus.SegwitHeight);
        if (height < -1 || height >= std::numeric_limits<int>::max()) {
            throw std::runtime_error(strprintf("Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.", height));
        } else if (height == -1) {
            LogPrintf("Segwit disabled for testing\n");
            height = std::numeric_limits<int>::max();
        }
        consensus.SegwitHeight = static_cast<int>(height);
    }

    if (!args.IsArgSet("-vbparams")) return;

    for (const std::string& strDeployment : args.GetArgs("-vbparams")) {
        std::vector<std::string> vDeploymentParams;
        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(":"));
        if (vDeploymentParams.size() != 3) {
            throw std::runtime_error("Version bits parameters malformed, expecting deployment:start:end");
        }
        int64_t nStartTime, nTimeout;
        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {
            throw std::runtime_error(strprintf("Invalid nStartTime (%s)", vDeploymentParams[1]));
        }
        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {
            throw std::runtime_error(strprintf("Invalid nTimeout (%s)", vDeploymentParams[2]));
        }
        bool found = false;
        for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {
            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {
                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);
                found = true;
                LogPrintf("Setting version bits activation parameters for %s to start=%ld, timeout=%ld\n", vDeploymentParams[0], nStartTime, nTimeout);
                break;
            }
        }
        if (!found) {
            throw std::runtime_error(strprintf("Invalid deployment (%s)", vDeploymentParams[0]));
        }
    }
}

static std::unique_ptr<const CChainParams> globalChainParams;

const CChainParams& Params()
{
    assert(globalChainParams);
    return *globalChainParams;
}

std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)
{
    if (chain == CBaseChainParams::MAIN)
        return std::unique_ptr<CChainParams>(new CMainParams());
    else if (chain == CBaseChainParams::TESTNET)
        return std::unique_ptr<CChainParams>(new CTestNetParams());
    else if (chain == CBaseChainParams::REGTEST)
        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));
    else if (chain == CBaseChainParams::DETREGTEST)
        return std::unique_ptr<CChainParams>(new CDetRegTestParams(gArgs));
    throw std::runtime_error(strprintf("%s: Unknown chain %s.", __func__, chain));
}

void SelectParams(const std::string& network)
{
    SelectBaseParams(network);
    globalChainParams = CreateChainParams(network);
    assert(globalChainParams != nullptr);
}
